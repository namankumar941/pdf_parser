const fs = require("fs");
const { z } = require("zod");

const MistralApiClass = require("./mistralApi");
const ClaudeAiApi = require("./claudeAiApi");
const ReplaceImageTagClass = require("./replaceImageTag");
const ui = require("../prompt/ui");
const OpenAI = require("openai");
const { Anthropic } = require("@anthropic-ai/sdk");
//----------------------------------------------class----------------------------------------------

class PageView {
  async getUploadPdf(req, res) {
    return res.render("uploadPdf");
  }

  async postUploadPdf(req, res) {
    //created class instance
    const mistralApiClass = new MistralApiClass();

    const ocrResponse = await mistralApiClass.mistralApi(req.file.filename);

    let markdowns = ocrResponse.markdowns;
    let imagesList = ocrResponse.imagesList;

    fs.writeFileSync(
      "markdowns.json",
      JSON.stringify(markdowns, null, 2),
      "utf-8"
    );
    fs.writeFileSync(
      "imagesList.json",
      JSON.stringify(imagesList, null, 2),
      "utf-8"
    );
    // const openai = new OpenAI({
    //   apiKey: process.env.OPENAI_API_KEY,
    // });

    // const response = await openai.responses.create({
    //   model: "o4-mini",
    //   input: [
    //     {
    //       role: "developer",
    //       content: [
    //         {
    //           type: "input_text",
    //           text: 'You are an HTML generator that converts an array of Markdown strings (each element is one “page”) into a single, complete HTML document. Follow these steps exactly—do not deviate or omit:\nstep 1. Return ONLY valid HTML code with NO explanations or text outside HTML tags\nstep 2. Use EXACTLY the same HTML structure, class names, and element hierarchy as shown in the example inside <ui example> </ui example> tag\nstep 3. Copy ALL CSS and JavaScript EXACTLY as provided - do not modify or omit any styles or functionality\nstep 4. Keep ALL original img tags intact - do not modify or convert them\nstep 5. Generating the basic HTML page as per example inside <ui example> </ui example> tag \nstep 6. important functionality that is to be added in basic HTML page are given inside <functionality></functionality> tag, HTML code for these \nfunctionality are given inside <ui example> </ui example> tag \nstep 7. now steps 8 to 18 are done in iteration till there are string present in markdown array.(eg initially i=0)\nstep 8. take one string from markdown array at a time (eg take markdownArray[i])\nstep 9. read the data inside the markdown string carefully so that no content or data is left behind and structure of data is also maintained.\nstep 10. extract the heading and subheading from markdown string and add then in navigation bar as per the navigation instruction present inside <navigation instruction></navigation instruction> tag.\nstep 11. if any table is present in markdown string the then render the table in HTML code as per the instruction inside <table></table> tag.\nstep 12. if any code is present in markdown string the then render the code in HTML code as per the instruction inside <code ></code > tag.\nstep 13. if any Mathematical formulas present in markdown string the then render the Mathematical formulas in HTML code as per the instruction inside <Mathematical formulas></Mathematical formulas> tag.\nstep 14. Render rest content also in same order as it is present and markdown string.\nstep 15. most important make sure nothing inside the markdown string is left behind.\nstep 16. Keep ALL original img tags intact - do not modify or convert them\nstep 17. Place converted markdown content inside .content div\nstep 18. now i+=1, now if markdownArray[i] has any string then jump to step 8 again and if markdownArray[i] has no string in it then move out of this loop.\nstep 18: before moving to next step verify:\n- Compare processed content against original Markdown string and make sure all content of markdown string is added to html code.\n- Check that ALL tables contain ALL their original data \n- check in table no column or rows are left behind.\n- Verify that ALL lists include ALL their original items\n- Confirm that ALL numerical values and statistics are preserved exactly\n- verify that no text content is omitted from markdown string.\n- main content of mardown string is displayed as per the requirements\n\n <ui example> \n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>PowerPixel Dashboard</title>\n    <link\n      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap"\n      rel="stylesheet"\n    />\n\n    <style>\n      body {\n        display: flex;\n        height: 100vh;\n        margin: 0;\n        font-family: "Inter", sans-serif;\n      }\n      .navigationbar {\n        width: 240px;\n        background-color: #0d1b2a;\n        color: #fff;\n        padding: 30px 20px;\n        overflow-y: auto;\n      }\n      .main {\n        flex: 1;\n        padding: 0;\n        overflow-y: auto;\n        height: 100vh;\n        background: #f4f7fa;\n      }\n      .nav {\n        display: flex;\n        flex-direction: column;\n      }\n      .nav-item {\n        padding: 12px 0;\n        color: #aaa;\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        cursor: pointer;\n        transition: color 0.3s;\n      }\n      .nav-item:hover,\n      .nav-item.active {\n        color: #fff;\n      }\n      .dropdown-content {\n        padding-left: 20px;\n        display: none;\n        flex-direction: column;\n      }\n      .dropdown-content.show {\n        display: flex;\n      }\n      .dropdown-item {\n        padding: 8px 0;\n        color: #888;\n        text-decoration: none;\n        font-size: 14px;\n        transition: color 0.3s;\n      }\n      .dropdown-item:hover,\n      .dropdown-item.active {\n        color: #ff385c;\n      }\n      .top-bar {\n        position: sticky;\n        top: 0;\n        width: 100%;\n        background: #f4f7fa;\n        padding: 30px;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        z-index: 999;\n        border-bottom: 1px solid #ddd;\n        box-sizing: border-box;\n      }\n      .search {\n        display: flex;\n        align-items: center;\n        gap: 10px;\n      }\n      .search input {\n        padding: 8px 12px;\n        border: 1px solid #ccc;\n        border-radius: 8px;\n        font-size: 14px;\n        width: 200px;\n      }\n      .content {\n        padding: 30px;\n      }\n      .section {\n        margin-bottom: 40px;\n        scroll-margin-top: 100px;\n      }\n      .section-title {\n        font-size: 24px;\n        margin-bottom: 20px;\n        color: #333;\n        border-bottom: 2px solid #180105;\n        padding-bottom: 10px;\n      }\n      mark {\n        background-color: yellow;\n        color: black;\n        padding: 0 2px;\n      }\n      /* Arrow rotation style when active */\n      .nav-item .arrow.active {\n        transform: rotate(90deg);\n      }\n    </style>\n  </head>\n  <body>\n    <div class="navigationbar">\n      <h1>Super Heading of PDF</h1>\n      <div class="nav">\n        <div class="nav-item" data-target="xyz">\n          <span>Heading 1</span>\n          <span class="arrow">▸</span>\n        </div>\n        <div class="dropdown-content" id="xyz-dropdown">\n          <a href="#xyz-sub1" class="dropdown-item">Sub-heading 1</a>\n          <a href="#xyz-sub2" class="dropdown-item">Sub-heading 2</a>\n        </div>\n\n        <div class="nav-item" data-target="abc">\n          <span>Heading 2</span>\n          <span class="arrow">▸</span>\n        </div>\n        <div class="dropdown-content" id="abc-dropdown">\n          <a href="#abc-sub1" class="dropdown-item">Sub-heading 1</a>\n        </div>\n      </div>\n    </div>\n\n    <div class="main">\n      <div class="top-bar">\n        <div class="search">\n          <button id="nextMatchBtn" style="display: none">⬇️</button>\n          <input type="text" id="searchInput" placeholder="Search" />\n        </div>\n      </div>\n      <div class="content">\n        <!-- all content from markdown string display here for example -->\n        <div id="xyz" class="section">\n          <h2 class="section-title">Heading 1</h2>\n          <div id="xyz-sub1" class="subsection">\n            <h3>Sub-heading 1</h3>\n            <p>\n              This is the content for sub-heading 1 under heading 1. You can add\n              your content here.\n            </p>\n          </div>\n          <div id="xyz-sub2" class="subsection">\n            <h3>Sub-heading 2</h3>\n            <p>\n              This is the content for sub-heading 2 under heading 1. You can add\n              your content here.\n            </p>\n          </div>\n        </div>\n\n        <!-- ABC Section -->\n        <div id="abc" class="section">\n          <h2 class="section-title">Heading 2</h2>\n          <div id="abc-sub1" class="subsection">\n            <h3>Sub-heading 1</h3>\n            <p>\n              This is the content for sub-heading 1 under heading 2. You can add\n              your content here.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <script>\n      // Navigation dropdown functionality\n      document.querySelectorAll(".nav-item").forEach((item) => {\n        item.addEventListener("click", function () {\n          const target = this.getAttribute("data-target");\n          const dropdown = document.getElementById(\'\\${target}-dropdown\');\n          const arrow = this.querySelector(".arrow");\n\n          // Toggle the active state for this dropdown\n          dropdown.classList.toggle("show");\n          arrow.classList.toggle("active");\n\n          // Close other dropdowns\n          document.querySelectorAll(".dropdown-content").forEach((content) => {\n            if (\n              content.id !== \'\\${target}-dropdown\' &&\n              content.classList.contains("show")\n            ) {\n              content.classList.remove("show");\n              content.previousElementSibling\n                .querySelector(".arrow")\n                .classList.remove("active");\n            }\n          });\n        });\n      });\n\n      // Smooth scrolling for navigation links\n      document.querySelectorAll(".dropdown-item").forEach((link) => {\n        link.addEventListener("click", function (e) {\n          e.preventDefault();\n          const targetId = this.getAttribute("href").substring(1);\n          const targetElement = document.getElementById(targetId);\n\n          if (targetElement) {\n            // Set active state for the clicked item\n            document.querySelectorAll(".dropdown-item").forEach((item) => {\n              item.classList.remove("active");\n            });\n            this.classList.add("active");\n\n            // Smooth scroll to the target\n            targetElement.scrollIntoView({\n              behavior: "smooth",\n              block: "start",\n            });\n          }\n        });\n      });\n\n      const searchInput = document.getElementById("searchInput");\n      const nextMatchBtn = document.getElementById("nextMatchBtn");\n      let matches = [];\n      let currentIndex = 0;\n\n      searchInput.addEventListener("input", handleSearch);\n      nextMatchBtn.addEventListener("click", navigateToNextMatch);\n\n      function handleSearch() {\n        const searchTerm = searchInput.value.trim().toLowerCase();\n        matches = [];\n        currentIndex = 0;\n\n        if (searchTerm) {\n          nextMatchBtn.style.display = "inline-block";\n        } else {\n          nextMatchBtn.style.display = "none";\n        }\n\n        // Select all text-containing elements inside \'.content\'\n        const textElements = document.querySelectorAll(\n          ".content p, .content h2, .content h3"\n        );\n\n        textElements.forEach((el) => {\n          const originalText = el.textContent;\n          const lower = originalText.toLowerCase();\n\n          if (searchTerm && lower.includes(searchTerm)) {\n            const regex = new RegExp(\'(\\${searchTerm})\', "gi");\n            el.innerHTML = originalText.replace(regex, "<mark>$1</mark>");\n          } else {\n            el.innerHTML = originalText;\n          }\n        });\n\n        matches = document.querySelectorAll(".content mark");\n        if (matches.length > 0) {\n          scrollToMatch(matches[0]);\n        }\n      }\n\n      function navigateToNextMatch() {\n        if (matches.length === 0) return;\n        scrollToMatch(matches[currentIndex]);\n        currentIndex = (currentIndex + 1) % matches.length;\n      }\n\n      function scrollToMatch(el) {\n        el.scrollIntoView({ behavior: "smooth", block: "center" });\n        el.style.animation = "highlightJump 0.6s ease";\n        setTimeout(() => (el.style.animation = ""), 600);\n      }\n    </script>\n  </body>\n</html>\n</ui example>\n\n <functionality>\n1: Split Page Layout\n- Left Side: Sticky vertical navigation bar showing all extracted headings and subheadings\n- Right Side: search bar at top and Scrollable main content area with all processed Markdown.\n2: Build Navigation Structure (Left Sidebar)\n- all headings and subheadings from all Markdown files.\n- Dynamically generate a full vertical navigation list.\n- other instruction to generate navigation bar are present inside <navigation instruction></navigation instruction> tag\n3: Search Functionality\n- Add a sticky search bar at the top-right of the main content area\n- Implement text highlighting for search matches\n- Add a match indicator for navigating between search results\n- Only display the indicator when search is active\n- do not change the content of the main content area while searching for matches.\n</functionality>\n\n<navigation instruction>\n- If a heading has subheadings, clicking it shows a dropdown with its subheadings.\n- If no subheadings, clicking directly scrolls to the section.\n- Smooth scroll to content on click on subheading.\n- Sticky, vertically aligned sidebar.\n- Ensure no headings/subheadings are missed.\n</navigation instruction>\n\n<table>\n- make sure all rows and columns are properly rendered.\n- no column or row should be left behind\n- Given markdown data that may contain a table in that case, Render the table into HTML code with clean styling (bordered, padding, and responsive).\n    * Analyze the table content: create a suitable chart (eg from the following options: Pie Chart, Bar Chart, Column Chart, Line Chart, Area Chart, Doughnut Chart, Heatmap, Scatter Plot, Tree Map, Gantt Chart, Pivot Table, cards).\n    * Generate the HTML code for the recommended chart too, using any simple JavaScript charting library like Chart.js (if needed).\n    * Make sure table and suitable chart both are rendered in HTML page\n    * Include both: The rendered HTML Table and The chart embedded below or beside the table.\n    * <example1>\n    if table in markdown string is: \n    | Metric    | Value  | Change |\n    |-----------|--------|--------|\n    | Customers | 45,320 | +5.4%  |\n    | Orders    | 45,320 | +12.6% |\n    | Earnings  | $8,750 | -2.4%  |\n    | Growth    | +3.52% | +22%   |\n    \n    then it is diplayed in html page as:\n    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>\n    <style>\n      .cards {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        gap: 20px;\n        margin-bottom: 30px;\n      }\n\n      .card {\n        background: #fff;\n        padding: 20px;\n        border-radius: 12px;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n      }\n\n      .card h3 {\n        font-size: 18px;\n        color: #666;\n        margin-bottom: 8px;\n      }\n\n      .card .value {\n        font-size: 24px;\n        font-weight: bold;\n        color: #000;\n      }\n\n      .card .change.positive {\n        color: #28a745;\n      }\n\n      .card .change.negative {\n        color: #dc3545;\n      }\n    </style>\n    <body>\n            <div class="cards">\n              <div class="card">\n                <h3>Customers</h3>\n                <div class="value">45,320</div>\n                <div class="change positive">+5.4%</div>\n              </div>\n              <div class="card">\n                <h3>Orders</h3>\n                <div class="value">45,320</div>\n                <div class="change positive">+12.6%</div>\n              </div>\n              <div class="card">\n                <h3>Earnings</h3>\n                <div class="value">$8,750</div>\n                <div class="change negative">−2.4%</div>\n              </div>\n              <div class="card">\n                <h3>Growth</h3>\n                <div class="value">+3.52%</div>\n                <div class="change positive">+22%</div>\n              </div>\n            </div>    \n    </body>\n\n    </example1>\n</table>\n<code >\n- Create an HTML page that renders an interactive code block\n- Scrollable Code Block: If the code exceeds the width of the container, allow horizontal scrolling so that the user can see the entire code without breaking the layout.\n- The code should be displayed inside a block with a black background and light-colored text to ensure visibility. Use a monospace font for the code and make the code block easily distinguishable from normal text.\n\n<example>\ncode with some explanation in markdown is:\nThe following is an example of a JavaScript function that calculates the square of a number. The code block is displayed with a **black background** and **light text** for clarity.\n\nfunction square(num) { \n    return num * num; \n}\n\nconsole.log(square(5)); // Output: 25\n\nthen it is diplayed in html page as:\n    <!-- Styling for the code block and interactive elements -->\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 20px;\n        background-color: #f4f4f9;\n      }\n      .content-container {\n        background-color: #fff;\n        border: 2px solid #ddd;\n        border-radius: 10px;\n        padding: 20px;\n        margin: 20px 0;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        transition: all 0.3s ease;\n      }\n      .content-container:hover {\n        background-color: #e9f7ff;\n        border-color: #007bff;\n      }\n      .header {\n        font-size: 1.5em;\n        margin-bottom: 10px;\n        font-weight: bold;\n        color: #333;\n      }\n      .explanation {\n        font-size: 1.1em;\n        color: #555;\n        margin-bottom: 10px;\n      }\n      .code-block {\n        background-color: #000;\n        color: #f1f8ff;\n        font-family: "Courier New", Courier, monospace;\n        padding: 15px;\n        border-radius: 5px;\n        font-size: 1.1em;\n        overflow-x: auto;\n        white-space: pre-wrap; /* Ensures long lines are wrapped */\n        margin-top: 10px;\n        border: 2px solid #007bff;\n      }\n      .code-block:hover {\n        background-color: #111;\n        border-color: #0099ff;\n      }\n    </style>\n\n  <body>\n    <div class="content-container">\n      <div class="header">Example Code Block</div>\n\n      <div class="explanation">\n        The following is an example of a JavaScript function that calculates the\n        square of a number. The code block is displayed with a **black\n        background** and **light text** for clarity.\n      </div>\n\n      <!-- Code Block Display -->\n      <div class="code-block">\n        function square(num) { <br />\n        &nbsp;&nbsp;&nbsp; return num * num; <br />\n        } <br />\n        <br />\n        console.log(square(5)); // Output: 25\n      </div>\n    </div>\n  </body>\n</example>\n</code >\n\n<Mathematical formulas>\nMathematical formulas: If any formulas are present, convert and render them carefully in the HTML page using MathJax or similar.\n<example>\nformula with some explanation in markdown is:\n\'### Energy Formula\nEinstein\'s famous equation that expresses the relationship between energy (E), mass (m), and the speed of light (c). It states that the energy of a body is equal to its mass multiplied by the square of the speed of light.\n\\[\nE = mc^2\n\\]\'\nthen it is diplayed in html page as:\n    <script\n      type="text/javascript"\n      async\n      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML"\n    ></script>\n\n    <!-- Styling for the interactive block -->\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 20px;\n        background-color: #f4f4f9;\n      }\n      .formula-container {\n        background-color: #fff;\n        border: 2px solid #ddd;\n        border-radius: 10px;\n        padding: 20px;\n        margin: 20px 0;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        transition: all 0.3s ease;\n      }\n      .formula-container:hover {\n        background-color: #e9f7ff;\n        border-color: #007bff;\n      }\n      .formula-header {\n        font-size: 1.5em;\n        margin-bottom: 10px;\n        font-weight: bold;\n        color: #333;\n      }\n      .explanation {\n        font-size: 1.1em;\n        color: #555;\n        margin-bottom: 10px;\n      }\n      .formula {\n        font-size: 1.5em;\n        font-family: "Times New Roman", Times, serif;\n        color: #333;\n        padding: 10px;\n        border: 2px solid #007bff;\n        background-color: #f1f8ff;\n        text-align: center;\n        border-radius: 5px;\n      }\n    </style>\n      <body>\n    <div class="formula-container">\n      <div class="formula-header">Energy Formula (E = mc²)</div>\n\n      <div class="explanation">\n        The formula \\( E = mc^2 \\) is Einstein\'s famous equation that expresses\n        the relationship between energy (E), mass (m), and the speed of light\n        (c). It states that the energy of a body is equal to its mass multiplied\n        by the square of the speed of light.\n      </div>\n\n      <!-- Formula Display -->\n      <div class="formula">\\( E = mc^2 \\)</div>\n    </div>\n  </body>\n</Mathematical formulas>',
    //         },
    //       ],
    //     },
    //     {
    //       role: "user",
    //       content: [
    //         {
    //           type: "input_text",
    //           text: `markdownArray = ${markdowns}`,
    //         },
    //       ],
    //     },
    //   ],
    //   text: {
    //     format: {
    //       type: "text",
    //     },
    //   },
    //   reasoning: {
    //     effort: "high",
    //   },
    //   tools: [],
    //   store: true,
    // });
    // console.log("response.output_text", response.output_text);

    // Process with claudeAi
    const claudeAiApi = new ClaudeAiApi();
    const uiOutput = await claudeAiApi.claudeApi(markdowns);

    fs.writeFileSync("output.json", JSON.stringify(uiOutput, null, 2), "utf-8");

    const replaceImageTagClass = new ReplaceImageTagClass();
    const updatedHtml = replaceImageTagClass.replaceImageTag(
      uiOutput,
      imagesList
    );
    return res.send(updatedHtml);
  }
}

module.exports = PageView;
