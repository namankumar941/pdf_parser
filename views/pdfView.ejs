<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Heading/Subheading Viewer</title>
    <style>
      body {
        margin: 0;
        font-family: Arial, sans-serif;
        display: flex;
        height: 100vh;
      }
      .sidebar {
        width: 30%;
        background: #f4f4f4;
        border-right: 1px solid #ccc;
        overflow-y: auto;
        padding: 1em;
      }
      .content {
        flex: 1;
        padding: 2em;
        overflow-y: auto;
      }
      .heading {
        font-weight: bold;
        cursor: pointer;
        margin-top: 1em;
      }
      .subheadings {
        display: none;
        margin-left: 1em;
      }
      .subheading {
        cursor: pointer;
        padding: 0.3em 0;
      }
      .heading.active + .subheadings {
        display: block;
      }
      .subheading:hover {
        color: #007bff;
      }
      .content img {
        max-width: 100%;
        height: auto;
      }
      .content table {
        border-collapse: collapse;
        width: 100%;
        margin-top: 1em;
      }
      .content th,
      .content td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
      }
    </style>

    <!-- MathJax for rendering LaTeX math formulas -->
    <script>
      window.MathJax = {
        tex: {
          inlineMath: [
            ["$", "$"],
            ["\\(", "\\)"],
          ],
          displayMath: [
            ["$$", "$$"],
            ["\\[", "\\]"],
          ],
          processEscapes: true,
          processEnvironments: true,
          tags: "all", // for \tag{} support
        },
        svg: {
          fontCache: "global",
        },
      };
    </script>

    <script
      src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"
      async
    ></script>
  </head>

  <body>
    <div class="sidebar" id="sidebar"></div>
    <div class="content" id="content">
      <h2>Select a subheading</h2>
    </div>

    <script>
      // Sample JSON object that follows your schema
      const jsonobj = <%- jsonObj %>;  // Correctly inject JSON object
      console.log(typeof(jsonobj));

      const sidebar = document.getElementById("sidebar");
      const content = document.getElementById("content");

      jsonobj.json.forEach((section) => {
        const headingText = section.heading && section.heading.trim() ? section.heading.trim() : "Data";
        const headingEl = document.createElement("div");
        headingEl.className = "heading";
        headingEl.textContent = headingText;
        headingEl.addEventListener("click", () => {
          headingEl.classList.toggle("active");
        });

        const subheadingList = document.createElement("div");
        subheadingList.className = "subheadings";

        section.content.forEach((item) => {
          if (item.data) {
            const subText = item.subheading && item.subheading.trim() ? item.subheading.trim() : "Details";
            const subEl = document.createElement("div");
            subEl.className = "subheading";
            subEl.textContent = subText;
            subEl.addEventListener("click", () => {
              content.innerHTML = `
                <h2>${subText}</h2>
                <div>${item.data}</div>
              `;
              if (window.MathJax) MathJax.typesetPromise();
            });
            subheadingList.appendChild(subEl);
          }
        });

        sidebar.appendChild(headingEl);
        sidebar.appendChild(subheadingList);
      });
    </script>
  </body>
</html>
